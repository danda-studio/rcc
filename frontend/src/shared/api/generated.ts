import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse,
} from "axios";

import type {
  SendContactRequest,
  SendContactResponse,
} from "./scheme";
/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * RCC
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery,
} from "@tanstack/react-query";

import axios from "axios";

export const postApiContactContact = (
  sendContactRequest: SendContactRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SendContactResponse>> => {
  return axios.post(
    `https://rcc-7z0s.onrender.com/api/Contact/contact`,
    sendContactRequest,
    options,
  );
};

export const getPostApiContactContactMutationOptions = <TError = AxiosError<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiContactContact>>, TError, { data: SendContactRequest }, TContext>; axios?: AxiosRequestConfig },
): UseMutationOptions<Awaited<ReturnType<typeof postApiContactContact>>, TError, { data: SendContactRequest }, TContext> => {
  const mutationKey = ["postApiContactContact"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && "mutationKey" in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiContactContact>>, { data: SendContactRequest }> = (props) => {
    const { data } = props ?? {};

    return postApiContactContact(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiContactContactMutationResult = NonNullable<Awaited<ReturnType<typeof postApiContactContact>>>;
export type PostApiContactContactMutationBody = SendContactRequest;
export type PostApiContactContactMutationError = AxiosError<unknown>;

export const usePostApiContactContact = <TError = AxiosError<unknown>, TContext = unknown>(options?: { mutation?: UseMutationOptions<Awaited<ReturnType<typeof postApiContactContact>>, TError, { data: SendContactRequest }, TContext>; axios?: AxiosRequestConfig }, queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiContactContact>>,
  TError,
  { data: SendContactRequest },
  TContext
> => {
  const mutationOptions = getPostApiContactContactMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getApiCountryCodes = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.get(
    `https://rcc-7z0s.onrender.com/api/Country/codes`,
    options,
  );
};

export const getGetApiCountryCodesQueryKey = () => {
  return [
    `https://rcc-7z0s.onrender.com/api/Country/codes`,
  ] as const;
};

export const getGetApiCountryCodesQueryOptions = <TData = Awaited<ReturnType<typeof getApiCountryCodes>>, TError = AxiosError<unknown>>(options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData>>; axios?: AxiosRequestConfig },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiCountryCodesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCountryCodes>>> = ({ signal }) => getApiCountryCodes({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiCountryCodesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCountryCodes>>>;
export type GetApiCountryCodesQueryError = AxiosError<unknown>;

export function useGetApiCountryCodes<TData = Awaited<ReturnType<typeof getApiCountryCodes>>, TError = AxiosError<unknown>>(
  options: { query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData>> & Pick<
    DefinedInitialDataOptions<
      Awaited<ReturnType<typeof getApiCountryCodes>>,
      TError,
      Awaited<ReturnType<typeof getApiCountryCodes>>
    >,
    "initialData"
  >; axios?: AxiosRequestConfig; },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCountryCodes<TData = Awaited<ReturnType<typeof getApiCountryCodes>>, TError = AxiosError<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData>> & Pick<
    UndefinedInitialDataOptions<
      Awaited<ReturnType<typeof getApiCountryCodes>>,
      TError,
      Awaited<ReturnType<typeof getApiCountryCodes>>
    >,
    "initialData"
  >; axios?: AxiosRequestConfig; },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetApiCountryCodes<TData = Awaited<ReturnType<typeof getApiCountryCodes>>, TError = AxiosError<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData>>; axios?: AxiosRequestConfig },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetApiCountryCodes<TData = Awaited<ReturnType<typeof getApiCountryCodes>>, TError = AxiosError<unknown>>(
  options?: { query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCountryCodes>>, TError, TData>>; axios?: AxiosRequestConfig },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiCountryCodesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
